{"file_contents":{"api/__init__.py":{"content":"","size_bytes":0},"api/app.py":{"content":"import os\nfrom flask import Flask, request, jsonify, make_response, send_file\nfrom flask_cors import CORS\nfrom api.utilities import init_curs\nfrom .club_util import VistaClubLookup\nfrom .user_util import verify_login\nfrom .download_video import extract_file_id\nimport requests\nimport time as time\n\napp = Flask(__name__)\nCORS(app)\n\nDOWNLOAD_DIR = \"../videos\"\n\nos.makedirs(DOWNLOAD_DIR, exist_ok=True)\n\n# Configuration\nSECRET_KEY = os.getenv('SECRET_KEY', os.urandom(24))\nprint(SECRET_KEY)\n\n@app.before_request\ndef before_request():\n    init_curs()\n\n@app.route(\"/api/login-google\", methods=[\"POST\"])\ndef login_google():\n    data = request.json\n    id_token = data.get(\"idToken\")\n\n    if not id_token:\n        return jsonify({'error': 'ID token is required'}), 400\n    \n    return verify_login(id_token)\n\n\n@app.route(\"/api/get-clubs-list\", methods=['GET'])\ndef get_classes_list():\n    club_list = VistaClubLookup()\n    print(club_list.get_json_string())\n    return jsonify(club_list.get_json_string())\n\n\n@app.route(\"/api/get-clubs-by-tag\", methods=['POST'])\ndef get_clubs_by_tags():\n\n    tags = request.json.get(\"tags\", [])\n    print(request.json)\n    print(\"Received tags:\", tags)  # Debug: Print received tags\n\n    if not tags:\n        print(\"No tags received or empty list provided\")\n        return jsonify([])\n\n    club_list = VistaClubLookup()\n    clubs = club_list.get_clubs_by_tags(tags)\n    \n    print(\"Matching clubs:\", clubs)  # Debug: Print matching clubs\n    return jsonify(clubs)\n\n\n@app.route(\"/api/get-all-tags\", methods=[\"GET\"])\ndef get_all_tags():\n    club_list = VistaClubLookup()\n    return jsonify(club_list.get_all_tags())\n\n@app.route(\"/api/download-video\", methods=[\"POST\", \"GET\"])\ndef download_club_video():\n    video_url = request.json.get(\"video_url\")\n    print(\"Video \", video_url)\n    if not video_url:\n        return jsonify({\"error\": \"No video URL provided\"}), 400\n\n    file_id = extract_file_id(video_url)\n    if not file_id:\n        return jsonify({\"error\": \"Invalid Google Drive URL\"}), 400 \n    \n    download_url = f\"https://drive.google.com/uc?export=download&id={file_id}\"\n    destination_path = os.path.join(os.getcwd(), \"videos\", f\"{file_id}.mp4\")\n    print(\"Destination Path\", destination_path)\n    print(\"FileID\", file_id)\n    print(\"OSPATH:\", os.path.join(os.getcwd(), \"videos\", \"movie.mp4\"))\n    if not os.path.isfile(destination_path):\n        print(\"Helllo\\n\\n\\n\")\n        response = requests.get(f\"https://drive.google.com/uc?export=download&id={file_id}\", stream=True)\n        if response.status_code == 200:\n            with open(f\"videos/{file_id}.mp4\", 'wb') as f:\n                for chunk in response.iter_content(1024):\n                    f.write(chunk)\n        else:\n            return jsonify({\"error\": f\"Failed to download file. Status code: {response.status_code}\"}), 500\n    return send_file(destination_path, as_attachment=False)\n\n\n","size_bytes":2886},"api/club_util.py":{"content":"import pandas as pd\nfrom .constants import CLUB_SHEET_URL\nimport json\n\n# Class Name: String\n# Grades: String (Will convert to list)\n# Weighted: Boolean\n# 3rd Year Science: Boolean\n# UC A-G: String\n# PreRequisite: String\n# Code: String\n# Rigor: float\n# Homework: int\nclass VistaClub:\n    def __init__(self, name, description, president, vp, treasurer, secretary, webmaster, historian, image, tags, advisor, times, room, video, instagram, discord, remind, gc, phone, email, image1, image2, highlight, gold_standard) -> None:\n        self.name = name\n        self.description = description\n        try:\n            self.president = president.split(\", \")\n        except AttributeError:\n            self.president = president\n        try:\n            self.vp = vp.split(\", \")\n\n        except AttributeError:\n            self.vp = vp\n        try:\n            self.treasurer = treasurer.split(\", \")\n        except AttributeError:\n            self.treasurer = treasurer\n        try:\n            self.secretary = secretary.split(\", \")\n\n        except AttributeError:\n            self.secretary = secretary\n        try:\n            self.webmaster = webmaster.split(\", \")\n\n        except AttributeError:\n            self.webmaster = webmaster\n        try:\n            self.historian = historian.split(\", \")\n\n        except AttributeError:\n            self.historian = historian\n        self.image = image\n        try:\n\n            self.tags = tags.split(\", \")\n        except AttributeError:\n            self.tags = tags\n        self.advisor = advisor\n        self.times = times\n        self.room = room\n        self.video = video\n        self.instagram = instagram\n        self.discord = discord\n        self.remind = remind\n        self.gc = gc\n        self.phone = phone\n        self.email = email\n        self.image1 = image1\n        self.image2 = image2\n        self.highlight = highlight\n        self.gold_standard = gold_standard\n\n    def get_name(self) -> str:\n        return self.name\n    \n    def get_desc(self) -> str:\n        return self.description\n    \n    def get_president(self) -> list:\n        return self.president\n    \n    def get_vp(self) -> list:\n        return self.vp\n\n    def get_historian(self) -> list:\n        return self.historian\n    \n    def get_treasurer(self) -> list:\n        return self.treasurer\n    \n    def get_secretary(self) -> list:\n        return self.secretary\n    \n    def get_webmaster(self) -> list:\n        return self.webmaster\n    \n    def get_club_image(self) -> str:\n        return self.image\n\n    def get_club_tags(self) -> list:\n        return self.tags\n    \n    def get_club_advisor(self) -> str:\n        return self.advisor\n    \n    def get_meeting_times(self) -> str:\n        return self.times\n    \n    def get_meeting_room(self) -> str:\n        return self.room\n\n    def get_club_video(self) -> str:\n        return self.video\n    \n    def get_instagram(self) -> str:\n        return self.instagram\n    \n    def get_remind(self) -> str:\n        return self.remind\n\n    def get_gc(self) -> str:\n        return self.gc\n    \n    def get_discord(self) -> str:\n        return self.discord\n    \n    def get_phone(self) -> str:\n        return self.phone\n    \n    def get_email(self) -> str:\n        return self.email\n    \n    def get_image1(self) -> str:\n        return self.image1\n    \n    def get_image2(self) -> str:\n        return self.image2\n    \n    def get_highlight(self) -> str:\n        return self.highlight\n\n    def get_is_gold_standard(self) -> bool:\n        return self.gold_standard\n\n    # Populate grade list given a range from the table\n    def _convert_grades_list(self, grades):\n        try:\n            newgrades = (grades.split(\"-\"))\n            if (len(newgrades) > 1):\n                newgrades = self.fill_nums(int(newgrades[0]), int(newgrades[1]))\n            else:\n                newgrades = [int(newgrades[0])]\n        except AttributeError: # we have passed in an already formatted list for grades, pass\n            newgrades = grades\n        return newgrades\n        \n    \n    @staticmethod\n    def fill_nums(lower, upper):\n        return list(range(lower, upper + 1))\n\nclass VistaClubHelper:\n\n    @staticmethod\n    def convert_data(data):    \n        vista_class_list = []\n\n        for i in data:\n            vista_class_list.append(VistaClub(i['Club Name'], i['Club Description'], i['President'], i['Vice President'], i['Treasurer'],\n                                             i['Secretary'], i['Webmaster'], i['Historian'], i['Image'], i['Tags'], i['Advisor'], \n                                             i['Meeting Times'], i['Meeting Room'], i[\"Club Video\"], i[\"Instagram\"], i[\"Discord\"], \n                                             i[\"Remind\"], i['Google Classroom'], i[\"Phone Number\"], i[\"Email Address\"], i[\"Image1\"], \n                                             i[\"Image2\"], i[\"Club Highlight\"], i[\"Gold Standard\"]))\n\n        return vista_class_list\n\n    @staticmethod\n    def convert_to_df(data):\n        new_list = []\n        for i in data:\n            new_list.append({\"Club Name\": i.get_name(), \"Club Description\": i.get_desc(), \"President\": i.get_president(), \"Vice President\": i.get_vp(), \n                             \"Treasurer\": i.get_treasurer(), \"Secretary\": i.get_secretary(), \"Webmaster\": i.get_webmaster(), \"Historian\": i.get_historian(), \n                             \"Image\": i.get_club_image(), \"Tags\": i.get_club_tags(), \"Advisor\": i.get_club_advisor(), \"Meeting Times\": i.get_meeting_times(),\n                            \"Meeting Room\": i.get_meeting_room(), \"Club Video\": i.get_club_video(), \"Instagram\": i.get_instagram(), \"Discord\": i.get_discord(), \n                            \"Remind\": i.get_remind(), \"Google Classroom\": i.get_gc(), 'Phone Number': i.get_phone(), \"Email Address\": i.get_email(), \n                            \"Image1\": i.get_image1(), \"Image2\": i.get_image2(), \"Club Highlight\": i.get_highlight(), \"Gold Standard\": i.get_is_gold_standard()})\n        \n        df = pd.DataFrame(new_list)\n        return df\n\n    @staticmethod\n    def convert_to_dictlist(data):\n        new_list = []\n        count = 1\n        for i in data:\n            new_list.append({\"id\": count, \"Club Name\": i.get_name(), \"Club Description\": i.get_desc(), \"President\": i.get_president(),\n                              \"Vice President\": i.get_vp(), \"Treasurer\": i.get_treasurer(), \"Secretary\": i.get_secretary(),\n                                \"Webmaster\": i.get_webmaster(), \"Historian\": i.get_historian(), \"Image\": i.get_club_image(),\n                                \"Tags\": i.get_club_tags(), \"Advisor\": i.get_club_advisor(), \"Meeting Times\": i.get_meeting_times(),\n                                \"Meeting Room\": i.get_meeting_room(), \"Club Video\": i.get_club_video(), \"Instagram\": i.get_instagram(),\n                                \"Discord\": i.get_discord(), \"Remind\": i.get_remind(), \"Google Classroom\": i.get_gc(),\n                                'Phone Number': i.get_phone(), \"Email Address\": i.get_email(), \"Image1\": i.get_image1(),\n                                \"Image2\": i.get_image2(), \"Club Highlight\": i.get_highlight(), \"Gold Standard\": i.get_is_gold_standard()})\n            count +=1\n        return new_list\n    \n    \n    schema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\"type\": \"string\"},\n        \"name\": {\"type\": \"number\"},\n        \"grades\": {\"type\": \"number\"},\n    },\n    \"required\": [\"name\", \"age\"]\n    }\n\nclass VistaClubLookup:\n\n    def __init__(self, df=None):\n        if df is None:\n            # Read from CSV if no DataFrame is provided\n            self.df = pd.read_csv(CLUB_SHEET_URL)\n\n\n        else:\n            # Use the provided DataFrame\n            self.df = df\n            \n        self.easy_df = VistaClubHelper.convert_data(self.df.fillna('null').to_dict(orient=\"records\"))\n        self.df = VistaClubHelper.convert_to_df(self.easy_df) # fixes list types when using the method that we create since it accounts for it\n\n\n    def print_db(self):\n        print(self.df)\n\n    def print_dict(self):\n        print(self.easy_df)\n\n    def get_json_string(self):\n        return json.dumps(VistaClubHelper.convert_to_dictlist(self.easy_df))\n\n    # Returns a list of VistaClass Objects\n    def get_clubs_by_tags(self, values_to_check:list):\n        filtered_df = self.df[self.df['Tags'].apply(lambda tags: all(value.lower() in [tag.lower() for tag in tags] for value in values_to_check))]\n        return json.dumps(VistaClubHelper.convert_to_dictlist(VistaClubHelper.convert_data(filtered_df.to_dict(orient=\"records\"))))\n\n    def get_all_tags(self):\n        exploded_tags = self.df['Tags'].explode()\n        # Get the unique values\n        print(exploded_tags.unique().tolist())\n        return json.dumps(exploded_tags.unique().tolist())\n\n\n\n\n\n\n\n\n\n\n","size_bytes":8787},"api/constants.py":{"content":"SHEET_URL = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSpuDZTPBnKX6fPmFJDikNbXhul71FCf0sg7sOs5zOd47lCO3Y5ERLTSS-FtQBXyJa25ZTFvMLoR5-h/pub?gid=0&single=true&output=csv\"\nCLUB_SHEET_URL = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSpuDZTPBnKX6fPmFJDikNbXhul71FCf0sg7sOs5zOd47lCO3Y5ERLTSS-FtQBXyJa25ZTFvMLoR5-h/pub?gid=658017674&single=true&output=csv\"\nCLASS_CAT_SHORTNAMES = [\"ssci\", \"engl\", \"math\", \"sci\", \"flang\", \"vapa\", \"physed\", \"elect\", \"cllg\"]\n\nWEIGHTED_DESC = \"Course is given an extra grade point in GPA if the course is completed with a \\\"C\\\" or higher\"\nTHIRD_YEAR_DESC = 'Courses in this category fulfill the FCUSD graduation requirement of \"Fine Art/Foreign Language/CTE\" or \"3rd year science/CTE\"'\nAG_DESC = 'Courses in this category have been approved by the University of California as College Prep courses that are used to calculate college eligibility'","size_bytes":880},"api/download_video.py":{"content":"import os\nimport re\nimport requests\n\nDOWNLOAD_DIR = \"videos\"\n\nos.makedirs(DOWNLOAD_DIR, exist_ok=True)\n\ndef extract_file_id(url):\n    \"\"\"\n    Extract file_id from Google Drive URL.\n    \"\"\"\n    # Match file ID in different URL formats\n    patterns = [\n        r\"https://drive\\.google\\.com/file/d/([a-zA-Z0-9_-]+)\",  # format: /file/d/FILE_ID/\n        r\"https://drive\\.google\\.com/open\\?id=([a-zA-Z0-9_-]+)\",  # format: /open?id=FILE_ID\n        r\"https://drive\\.google\\.com/uc\\?export=download&id=([a-zA-Z0-9_-]+)\"  # format: /uc?export=download&id=FILE_ID\n    ]\n\n    for pattern in patterns:\n        match = re.search(pattern, url)\n        if match:\n            return match.group(1)\n    \n    return None\n\n","size_bytes":705},"api/user_util.py":{"content":"from time import time\nimport firebase_admin\nfrom firebase_admin import db, credentials, auth\nfrom dotenv import load_dotenv\n\nfrom flask import jsonify\n\ncred = credentials.Certificate(\"api/creds.json\")\nfirebase_admin.initialize_app(cred)\n\n\nfrom flask import jsonify\nfrom firebase_admin import auth\n\ndef verify_login(id_token):\n    try:\n        decoded_token = auth.verify_id_token(id_token)\n        uid = decoded_token['uid']\n        print(\"User authenticated\")\n        \n        return jsonify({'message': 'User authenticated', 'uid': uid}), 200\n\n    except auth.InvalidIdTokenError:\n        return jsonify({'error': 'Invalid token'}), 401\n    except auth.ExpiredIdTokenError:\n        return jsonify({'error': 'Token expired'}), 401\n    except Exception as e:\n        print(f'Error verifying token: {e}')\n        return jsonify({'error': 'Token verification failed'}), 401","size_bytes":871},"api/utilities.py":{"content":"# '''\n\n# This utils model is generally the entire backend for our project.\n# It makes the app.py file with the routes look simple but all the\n# detailed coding will be here and utilized there in a simple manner.\n\n# So far this is just being used for login/registration purposes but as\n\n# we need features those will go here too (like API stuff ya feel).\n\n\n# BCRYPT is the module we are using for encryption of passwords/user IDs\n# Introduce the firebase module to work with Google Authentication (trust)\n# '''\n\n\nfrom flask import make_response\n\n\n\n# # Initialize CORS\ndef init_curs():\n    response = make_response()\n    response.headers.add('Access-Control-Allow-Origin', 'http://localhost:3000')\n    response.headers.add('Access-Control-Allow-Headers', 'Content-Type')\n    response.headers.add('Access-Control-Allow-Methods', 'GET')\n    response.headers.add('Access-Control-Allow-Methods', 'POST')\n","size_bytes":898},"main.py":{"content":"import os\nfrom api.app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True, port=8080)\n","size_bytes":113},"replit.md":{"content":"# Club Management Backend API\n\n## Overview\nThis is a Flask-based REST API backend for a school club management system. It provides endpoints for browsing clubs, filtering by tags, user authentication via Firebase, and downloading club videos from Google Drive.\n\n## Purpose\n- Backend API that serves club data from Google Sheets\n- Handles Google OAuth authentication through Firebase\n- Provides video downloads from Google Drive\n- Designed to work with a separate frontend application (typically running on port 3000)\n\n## Current State\n- Backend API running on port 8080\n- Connected to Google Sheets for club data\n- Firebase authentication configured\n- CORS enabled for frontend at http://localhost:3000\n\n## Architecture\n\n### API Endpoints\n- `POST /api/login-google` - Google authentication via Firebase\n- `GET /api/get-clubs-list` - Get all clubs\n- `POST /api/get-clubs-by-tag` - Filter clubs by tags\n- `GET /api/get-all-tags` - Get all available tags\n- `POST /api/download-video` - Download club videos from Google Drive\n\n### Key Components\n- **Flask Backend** (port 8080)\n- **Firebase Admin SDK** for authentication\n- **Google Sheets** for club data storage\n- **Pandas** for data processing\n- **CORS** configured for frontend communication\n\n## Project Structure\n```\n/\n├── api/\n│   ├── app.py              # Main Flask application with routes\n│   ├── club_util.py        # Club data models and utilities\n│   ├── user_util.py        # Firebase authentication\n│   ├── utilities.py        # CORS configuration\n│   ├── download_video.py   # Google Drive video downloads\n│   ├── constants.py        # Configuration constants\n│   ├── creds.json          # Firebase credentials\n│   └── requirements.txt    # Python dependencies\n├── main.py                 # Entry point\n└── videos/                 # Downloaded videos directory\n\n## Recent Changes\n- **Oct 2, 2025**: Imported from GitHub and configured for Replit\n  - Removed test/debug code that ran on module import\n  - Configured backend to run on 0.0.0.0:8080\n  - Set up workflow for Flask backend\n  - Created main.py entry point\n\n## Dependencies\n- Flask 3.x - Web framework\n- Firebase Admin - Authentication\n- Pandas - Data processing\n- Google API Client - Sheets/Drive integration\n- Flask-CORS - Cross-origin support\n\n## Frontend Integration\nThis backend is designed to work with a separate frontend repository. The frontend should:\n- Run on port 3000 (configured in CORS)\n- Make API calls to http://localhost:8080/api/*\n- Handle Google OAuth token generation\n- Display club information and filtering UI\n\n## Environment Setup\n- Python 3.11\n- Backend runs on: http://0.0.0.0:8080\n- Firebase credentials: api/creds.json\n- Club data source: Google Sheets (see constants.py for URL)\n","size_bytes":2810}},"version":1}